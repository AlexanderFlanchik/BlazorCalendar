@page "/"

@using BlazorCalendar.Client.Pages
@using BlazorCalendar.Common
@using BlazorCalendar.DTOs
@using BlazorCalendar.UseCases.Calendar
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@rendermode InteractiveAuto

@inject IGetCalendar getCalendarUseCase

@attribute [Authorize]

<PageTitle>My Calendar</PageTitle>

<div class="calendar-wrapper">
    <CalendarFilters 
        Month="@month" 
        Year="@year" 
        Months="@model.CurrentCalendar.Months" 
        Years="@model.CurrentCalendar.Years" 
        OnValuesChanged="@LoadCalendarData"
    />
    <EventGrid
        UserId="@userId"
        Events="@dayEvents"
        Month="@month"
        Year="@year" 
    />
    <div class="button-bar">
        @if (month > 1)
        {
            <button class="btn btn-primary" @onclick="@PreviousClick">Previous</button>
        }

        @if (month < 12)
        {
            <button class="btn btn-primary" @onclick="@NextClick">Next...</button>
        }
    </div>
</div>

@code {
    CalendarModel model = CalendarModel.Empty;

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }

    int year, month;
    string userId = string.Empty;
    private IList<DayEvent> dayEvents = new List<DayEvent>();

    protected async override Task OnInitializedAsync()
    {
        if (AuthStateTask is null)
        {
            return;
        }

        var authState = await AuthStateTask;
        var currentUserId = authState.GetCurrentUserId();

        if (currentUserId is null)
        {
            return;
        }

        userId = currentUserId;
        var now = DateTime.UtcNow;

        await LoadCalendarData(now.Month, now.Year);
    }

    private async Task LoadCalendarData(int newMonth, int newYear)
    {
        year = newYear;
        month = newMonth;

        await LoadCurrentCalendarData();
    }

    private async Task PreviousClick()
    {
        month--;

        await LoadCurrentCalendarData();
    }

    private async Task NextClick()
    {
        month++;

        await LoadCurrentCalendarData();
    }

    private async Task LoadCurrentCalendarData()
    {
        model = await getCalendarUseCase.GetAsync(year, month, userId);
        dayEvents = model.GetDayEvents();

        StateHasChanged();
    }
}